name: Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  ruff: # https://docs.astral.sh/ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: pip install --user ruff
      - run: ruff check --output-format=github

  test:
    name: Test (py${{ matrix.python-version }}, dj${{ matrix.django-version }}, es${{ matrix.elastic-version }})
    runs-on: ubuntu-latest
    needs: ruff # Do not run the tests if linting fails.
    strategy:
      fail-fast: false
      matrix: # https://docs.djangoproject.com/en/stable/faq/install/#what-python-version-can-i-use-with-django
        django-version: ["4.2", "5.1", "5.2"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        elastic-version: ["7.17.12"]
        exclude:
          - django-version: "4.2"
            python-version: "3.13"
          - django-version: "5.1"
            python-version: "3.9"
          - django-version: "5.2"
            python-version: "3.9"
    services:
      elastic:
        image: elasticsearch:${{ matrix.elastic-version }}
        env:
          discovery.type: "single-node"
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200
      solr:
        image: solr:6
        ports:
          - 9001:8983
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore GDAL runtime cache
        id: gdal-cache
        uses: actions/cache@v4
        with:
          path: .gdal-root
          key: gdal-root-${{ runner.os }}
      - name: Build portable GDAL runtime (on cache miss)
        if: steps.gdal-cache.outputs.cache-hit != 'true'
        run: |
          set -eux
          sudo apt-get update -y
          # Download .debs only; do NOT install
          mkdir -p .gdal-debs
          pushd .gdal-debs
            # core runtime bits; adjust patterns as Ubuntu image evolves
            apt-get download gdal-bin 'libgdal*' 'libproj*' 'proj-bin' 'proj-data'
          popd
          # Extract into a portable prefix
          rm -rf .gdal-root
          mkdir -p .gdal-root
          for f in .gdal-debs/*.deb; do
            dpkg -x "$f" .gdal-root
          done
          # Quick sanity check
          .gdal-root/usr/bin/gdalinfo --version || true
      - name: Export GDAL environment
        run: |
          echo "$(pwd)/.gdal-root/usr/bin" >> $GITHUB_PATH
          {
            echo "LD_LIBRARY_PATH=$(pwd)/.gdal-root/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
            echo "PROJ_LIB=$(pwd)/.gdal-root/usr/share/proj"
            echo "GDAL_DATA=$(pwd)/.gdal-root/usr/share/gdal"
          } >> $GITHUB_ENV
      - name: Verify GDAL
        run: |
          which gdalinfo
          gdalinfo --version
      - name: Setup solr test server in Docker
        run: bash test_haystack/solr_tests/server/setup-solr-test-server-in-docker.sh
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install coverage requests tox tox-gh-actions
          pip install django==${{ matrix.django-version }} elasticsearch==${{ matrix.elastic-version }}
          pip install --editable .
      - name: Run test
        run: tox -v
        env:
          DJANGO: ${{ matrix.django-version }}
